name: Deploy to cPanel

on:
  push:
    branches: [ main ]  # Deploy when pushing to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Add environment configuration for better secret management
    environment: production
    
    # Define all environment variables once at the job level
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      WC_CONSUMER_KEY: ${{ secrets.WC_CONSUMER_KEY }}
      WC_CONSUMER_SECRET: ${{ secrets.WC_CONSUMER_SECRET }}
    
    steps:
    # Step 1: Clone repository code
    - name: Checkout code
      uses: actions/checkout@v3
      
    # New Step: Cache dependencies and Next.js build cache
    - name: Cache Next.js build and npm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      
    # Step 2: Setup Node.js environment - Node 18 LTS is recommended for Next.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.18.2'  # Using 18 LTS instead of 23.3.0 which is not yet stable
        cache: 'npm'  # Enables caching of npm dependencies
        
    # Step 3: Install project dependencies
    - name: Install dependencies
      run: npm install  # Use regular install instead of ci to avoid package-lock issues
      
    # Step 4: Build Next.js application with production settings
    - name: Build Next.js app
      run: npm run build
      # Environment variables are inherited from the job level, no need to repeat
      
    # Step 5: Deploy the .next directory (contains compiled application) via SFTP
    - name: SFTP Deploy .next build files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: 1624
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: ".next/static .next/server"
        target: "/home/housedes/public_html/housedesigns/.next/"
        protocol: sftp
        overwrite: true
        rm: false
        strip_components: 0
        # Exclude is not supported by scp-action. If you need to exclude files, prepare a temp directory before this step.
         
    # Create necessary directories via SSH before supporting files upload
    - name: Create directories via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: 1624
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          # Create any required directories that might be missing
          mkdir -p /home/housedes/public_html/housedesigns/.next/static
          mkdir -p /home/housedes/public_html/housedesigns/public/Architecture
          # Ensure directory permissions are correct
          chmod -R 755 /home/housedes/public_html/housedesigns/public/Architecture
          # Protect manually uploaded configuration files
          if [ -f /home/housedes/public_html/housedesigns/.env ]; then
            chmod 600 /home/housedes/public_html/housedesigns/.env
          fi
          if [ -f /home/housedes/public_html/housedesigns/.gitignore ]; then
            chmod 644 /home/housedes/public_html/housedesigns/.gitignore
          fi
          
    # Step 6: Deploy supporting files via SFTP
    - name: SFTP Deploy supporting files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: 1624
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: "*"
        target: "/home/housedes/public_html/housedesigns/"
        protocol: sftp
        overwrite: true
        rm: false
        strip_components: 0
        # Exclude is not supported by scp-action. If you need to exclude files, prepare a temp directory before this step.
          
    # Step 7: Restart PM2
    - name: Restart PM2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: 1624
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          # Activate the virtual environment
          source /home/housedes/nodevenv/public_html/housedesigns/20/bin/activate
          
          # Navigate to the project directory
          cd /home/housedes/public_html/housedesigns
          
          npm install --production  # Install production dependencies only
          
          # Reload or start the PM2 process
          if pm2 list | grep -q "housedesigns"; then
            echo "Reloading existing PM2 process..."
            pm2 reload housedesigns
          else
            echo "Starting new PM2 process..."
            pm2 start server.js --name housedesigns --update-env
          fi
          
          # Save PM2 process list to persist across server restarts
          pm2 save